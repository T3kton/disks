#!/bin/sh

DEBUG=0
NET_DEBUG=0
CONFIG_SRC="remote"
HTTP_PROXY=
INTERFACE=
INTERFACE_MAC=
IP_PROMPT=0
NO_IP=0
IP_ADDRESS=
GATEWAY=
NETMASK=
DNS_SERVER=
DNS_SEARCH_ZONE=
HOSTNAME=
PLATO_IP=
CONFIG_PROXY=
CONFIG_URL="http://plato/config/pxe_config"
PLATO_HOST="plato"
MEDIA_UUID=
MEDIA_LABEL=

error_happened()
{
  echo "And Error occured..."
  while true;
  do
    read -t 1 IGNORE  #clear out any garbage that might of been entered
    read -s -n 1 -p "(R)eboot  (P)ower Off  (S)hell" RESPONSE
    if [ "$RESPONSE" == "R" ] || [ "$RESPONSE" == "r" ];
    then
      /sbin/reboot
    elif [ "$RESPONSE" == "P" ] || [ "$RESPONSE" == "p" ];
    then
      /sbin/poweroff
    elif [ "$RESPONSE" == "S" ] || [ "$RESPONSE" == "s" ];
    then
      echo ""
      echo "Dropping to shell, type 'exit' to close shell..."
      /bin/cttyhack /bin/sh -l
    fi
  done
}

for x in $(cat /proc/cmdline);
do
  case $x in
    http_proxy=*)
      HTTP_PROXY=${x#http_proxy=}
      ;;
    interface=*)
      INTERFACE=${x#interface=}
      ;;
    interface_mac=*)
      INTERFACE_MAC=${x#interface_mac=}
      ;;
    ip_address=*)
      IP_ADDRESS=${x#ip_address=}
      ;;
    gateway=*)
      GATEWAY=${x#gateway=}
      ;;
    netmask=*)
      NETMASK=${x#netmask=}
      ;;
    dns_server=*)
      DNS_SERVER=${x#dns_server=}
      ;;
    dns_search_zone=*)
      DNS_SEARCH_ZONE=${x#dns_search_zone=}
      ;;
    hostname=*)
      HOSTNAME=${x#hostname=}
      ;;
    ip_prompt)
      IP_PROMPT=1
      ;;
    no_ip)
      NO_IP=1
      ;;
    plato_ip=*)
      PLATO_IP=${x#plato_ip=}
      ;;
    config_url=*)
      CONFIG_URL=${x#config_url=}
      PLATO_HOST="$(echo \"$CONFIG_URL\" | awk -F/ '{print $3}')"
      ;;
    config_proxy=*)
      CONFIG_PROXY=${x#config_proxy=}
      ;;
    debug)
      DEBUG=1
      ;;
    net_debug)
      NET_DEBUG=1
      ;;
    no_config)
      CONFIG_SRC="none"
      ;;
    local_config)
      CONFIG_SRC="local"
      ;;
    media_uuid=*)
      MEDIA_UUID=${x#media_uuid=}
      ;;
    media_label=*)
      MEDIA_LABEL=${x#media_label=}
      ;;
  esac
done

export plato_host=$PLATO_HOST

if [ "x$CONFIG_PROXY" != "x" ];
then
  PING_HOST="$(echo \"$CONFIG_PROXY\" | awk -F/ '{print $3}')"
else
  PING_HOST="$PLATO_HOST"
fi

if [ "$NET_DEBUG" == "1" ];
then
  /bin/cttyhack /bin/sh -l
  /sbin/poweroff
fi

if [ "x$INTERFACE_MAC" != "x" ];
then
  INTERFACE=

  for iface in $( ls /sys/class/net | grep -v bond | grep -v lo );
  do
    if [ "$INTERFACE_MAC" == "$( cat /sys/class/net/$iface/address )" ];
    then
      INTERFACE=$iface
      break
    fi
  done

  if [ "x$INTERFACE" == "x" ];
  then
    echo "No network interface with MAC '$INTERFACE_MAC' found."
    error_happened
  fi
fi

if [ "$NO_IP" == "0" ];
then
  # dhcping is here and not in rcS so we can get a virtual console and to look at dhcp errors, if in rcS none of the virtual terminals start up till after we get an ip
  echo "Getting Ip..."
  if [ "$IP_PROMPT" == "1" ];
  then
    IS_OK=0
    while [ "$IS_OK" == "0" ];
    do
      read -t 1 IGNORE  #clear out any garbage that might of been entered
      echo "Enter blank Ip Address to DHCP."
      read -p "Ip Address: " tmp_IP_ADDRESS
      read -p "Net Mask: " tmp_NETMASK
      read -p "Gateway: " tmp_GATEWAY
      read -p "DNS Server: " tmp_DNS_SERVER
      read -p "DNS Search Zone: " tmp_DNS_SEARCH_ZONE
      if [ "x$INTERFACE" == "x" ];
      then
        read -p "Interface: " tmp_INTERFACE
      fi
      if [ "x$HTTP_PROXY" == "x" ];
      then
        read -p "HTTP Proxy: " tmp_HTTP_PROXY
      fi
      echo
      echo "Setting"
      echo "      Ip Address: $tmp_IP_ADDRESS"
      echo "         Netmask: $tmp_NETMASK"
      echo "         Gateway: $tmp_GATEWAY"
      echo "      DNS Server: $tmp_DNS_SERVER"
      echo " DNS Search Zone: $tmp_DNS_SEARCH_ZONE"
      if [ "x$INTERFACE" == "x" ];
      then
        echo "       Interface: $tmp_INTERFACE"
      else
        echo "       Interface: $INTERFACE (configured at boot)"
      fi
      if [ "x$HTTP_PROXY" == "x" ];
      then
        echo "      HTTP Proxy: $tmp_HTTP_PROXY"
      else
        echo "      HTTP Proxy: $HTTP_PROXY (configured at boot)"
      fi
      RESPONSE="_"
      while [ "$RESPONSE" != "Y" ] && [ "$RESPONSE" != "y" ] && [ "$RESPONSE" != "N" ] && [ "$RESPONSE" != "n" ];
      do
        read -s -n 1 -p "This Correct (Y/N)?" RESPONSE
      done
      if [ "$RESPONSE" == "Y" ] || [ "$RESPONSE" == "y" ];
      then
        IS_OK=1
      fi
      IP_ADDRESS=$tmp_IP_ADDRESS
      NETMASK=$tmp_NETMASK
      GATEWAY=$tmp_GATEWAY
      DNS_SERVER=$tmp_DNS_SERVER
      DNS_SEARCH_ZONE=$tmp_DNS_SEARCH_ZONE
      if [ "x$INTERFACE" == "x" ];
      then
        INTERFACE=$tmp_INTERFACE
      fi
      if [ "x$HTTP_PROXY" == "x" ];
      then
        HTTP_PROXY=$tmp_HTTP_PROXY
      fi
      echo
      echo
    done
  fi

  if [ "x$INTERFACE" == "x" ];
  then
    echo "No Interface specified, guessing eth0."
    INTERFACE="eth0"
  fi

  if [ "x$INTERFACE" != "xany" ];
  then
    if [ ! -e /sys/class/net/$INTERFACE ];
    then
      echo "No network interface named '$INTERFACE' found."
      error_happened
    fi
  fi

  echo "Starting Interface $INTERFACE..."

  if [ "x$HOSTNAME" == "x" ];
  then
    if [ "x$INTERFACE" == "xany" ];
    then
      HOSTNAME="mac$(cat /sys/class/net/e*/address | head -n1 | sed s/://g)" # make sure bond0 nor lo isn't included, lo's mac is 0 and bond*'s mac is usless without any members
    else
      HOSTNAME="mac$(cat /sys/class/net/$INTERFACE/address | sed s/://g)"
    fi
  fi
  echo "Hostname: $HOSTNAME"
  hostname $HOSTNAME
  echo "127.0.0.1 localhost $HOSTNAME" > /etc/hosts
  echo "$HOSTNAME" > /etc/hostname

  if [ "x$PLATO_IP" != "x" ];
  then
    echo "$PLATO_IP $PLATO_HOST" >> /etc/hosts
  fi

  if [ "x$IP_ADDRESS" != "x" ];
  then
    if [ "x$INTERFACE" == "xany" ];
    then # mabey at some time just pick the first interface and put it on, or something else more deterministic
      echo "Can't use 'any' for interface for statically assigned ip"
      exit 1
    fi
    /bin/logger "Setting Ip to $IP_ADDRESS, netmask $NETMASK, gateway $GATEWAY on $IFACE"
    /sbin/ip addr flush dev $INTERFACE
    /sbin/ip link set $INTERFACE up
    /sbin/ip addr add $IP_ADDRESS/$NETMASK dev $INTERFACE
    /sbin/ip route add default via $GATEWAY dev $INTERFACE
    echo "domain $DNS_SEARCH_ZONE" > /etc/resolv.conf
    echo "nameserver $DNS_SERVER" >> /etc/resolv.conf
    rc=1
    counter=1
    while [ "x$rc" != "x0" ];
    do
      echo "Pinging Gateway $GATEWAY, ($counter/10)...."
      ping -q -c4 $GATEWAY > /dev/null 2> /dev/null
      rc=$?
      counter=$(( counter + 1 ))
      if [ "x$rc" != "x0" ] && [ "$counter" -gt "10" ];
      then
        echo "Error trying to ping Gateway."
        error_happened
      fi
      if [ "x$rc" != "x0" ];
      then
        sleep 10
      fi
    done
  else
    echo "Getting ip address..."
    if [ "x$INTERFACE" == "xany" ];
    then
      INTERFACE_LIST="$( ls /sys/class/net/ | grep -v bond | grep -v lo )"
    elif [ "x$INTERFACE" != "x" ];
    then
      INTERFACE_LIST=$INTERFACE
    else
      echo "Error Interface name is blank..."
      error_happened
    fi

    #/tmp/dhcp-interface created by lib/udhcpc/script
    rm -f /tmp/dhcp-interface
    while [ ! -f /tmp/dhcp-interface ];
    do
      for iface in $INTERFACE_LIST;
      do
        echo "Bringing up $iface..."
        /sbin/ip link set $iface up
        counter=1
        while [ "x$(cat /sys/class/net/$iface/operstate)" != "xup" ] && [ "$counter" -lt "30" ];
        do
          echo -n "."
          counter=$(( counter + 1 ))
          sleep 1
        done
        echo
        if [ "x$(cat /sys/class/net/$iface/operstate)" != "xup" ];
        then
          echo "Interface '$iface' didn't come up, skipping..."
          echo "Random delay before trying next interface..."
          /bin/sleep $(( $RANDOM % 120 ))
          /sbin/ip link set $iface down
          continue
        fi
        echo "DHCPing on '$iface'..."
        /sbin/udhcpc --interface=$iface -x:hostname $HOSTNAME --vendorclass=bootabledisk --timeout=10 --syslog --arping --release
        if [ -f /tmp/dhcp-interface ];
        then
          if [ "x$CONFIG_SRC" == "xremote" ];
          then
            echo "Resolving '$PING_HOST'..."
            nslookup $PING_HOST > /dev/null #TODO: find another way to do this, and remove nslookup from busybox.... it's the only thing with _res in busybox
            rc=$?
            if [ "x$rc" == "x0" ];
            then
              echo "Ping test to '$PING_HOST'..."
              ping -q -c2 $PING_HOST > /dev/null 2> /dev/null
              rc=$?
              if [ "x$rc" == "x0" ];
              then # we have a winner, let's get out of here
                break
              else
                echo "Interface '$( cat /tmp/dhcp-interface )' could not ping '$PING_HOST', skipping..."
                rm -f /tmp/dhcp-interface
              fi
            else
              echo "Interface '$( cat /tmp/dhcp-interface )' could not resolve '$PING_HOST', skipping..."
              rm -f /tmp/dhcp-interface
            fi
          else # not remote config, any ip will do, as far as we can tell anyway
            break
          fi
        fi
        /bin/killall udhcpc
        /bin/sleep 1
        /sbin/ip addr flush dev $iface
        /sbin/ip link set $iface down
        echo "Random delay before trying next interface...."
        /bin/sleep $(( $RANDOM % 120 ))
      done
    done
    INTERFACE=$(cat /tmp/dhcp-interface)
  fi

else
  hostname localhost
  echo "127.0.0.1 localhost" > /etc/hosts
fi

if [ "x$MEDIA_UUID" != "x" ];
then
  mkdir /media
  modprobe ext2 ext3 ext4 vfat
  /sbin/udevadm trigger
  /sbin/udevadm settle
  mount UUID=$MEDIA_UUID /media
  if [ "$?" -ne "0" ];
  then
    echo "Error mounting media by UUID"
    error_happened
  fi
elif [ "x$MEDIA_LABEL" != "x" ];
then
  mkdir /media
  modprobe ext2 ext3 ext4 vfat
  /sbin/udevadm trigger
  /sbin/udevadm settle
  mount LABEL=$MEDIA_LABEL /media
  if [ "$?" -ne "0" ];
  then
    echo "Error mounting media by Label"
    error_happened
  fi
fi

if [ "$CONFIG_SRC" == "local" ];
then
  if [ -r /media/config_file ];
  then
    cp /media/config_file /tmp/config_file
  elif [ -r /config_file ];
  then
    cp /config_file /tmp/config_file
  fi

  if [ ! -r /tmp/config_file ];
  then
    echo "No Local Config!"
    error_happened
  fi

elif [ "$CONFIG_SRC" == "remote" ];
then
  if [ "$NO_IP" == "1" ];
  then
    echo "No IP to get config with!"
    error_happened
  fi

  # for some reason http_proxy get's set before now, not sure where/how/why
  export http_proxy=
  export https_proxy=

  echo "Getting PXE Config from $CONFIG_URL..."

  if [ "x$CONFIG_PROXY" != "x" ];
  then
    /bin/logger "config proxy: $CONFIG_PROXY"
    export http_proxy=$CONFIG_PROXY
    export https_proxy=$CONFIG_PROXY
  fi

  /bin/logger "config url: $CONFIG_URL"

  echo "Getting $CONFIG_URL"

  wget -q -O /tmp/config_file.tmp $CONFIG_URL
  rc=$?

  export http_proxy=
  export https_proxy=

  if [ "$rc" -ne "0" ];
  then
    echo "Error getting the config file"
    error_happened
  fi

  #thanks to the web standard \r\n which messes up bash/ash
  cat /tmp/config_file.tmp | tr -d \\r > /tmp/config_file

  rm /tmp/config_file.tmp
fi


if [ "x$HTTP_PROXY" != "x" ];
then
  echo "Setting 'http_proxy' to $HTTP_PROXY..."
  /bin/logger "http_proxy: $HTTP_PROXY"
  export http_proxy=$HTTP_PROXY
  export https_proxy=$HTTP_PROXY
fi

if [ "x$CONFIG_PROXY" != "x" ];
then
  echo "Setting 'plato_proxy' to $CONFIG_PROXY..."
  /bin/logger "plato_proxy: $CONFIG_PROXY"
  export plato_proxy=$CONFIG_PROXY
fi

if [ "x$DEBUG" != "x1" ];
then
  read -t 1 IGNORE  #clear out any garbage that might of been entered
  read -t 10 -n 1 -p "Press \"D\" to enter Debug, any other key to continue (10 second timeout)..." tmp_DEBUG
  if [ "x$tmp_DEBUG" == "xd" ] || [ "x$tmp_DEBUG" == "xD" ];
  then
    DEBUG="1"
  else
    echo -e "\nContinuing...\n"
  fi
fi

if [ "x$DEBUG" == "x1" ];
then
  echo -e "\nType \"exit\" to continue the PXE process...\n"
  /bin/cttyhack /bin/sh -l
fi

./do_task
rc=$?
# exit status
# 20 - reboot
# 10 - Had an error, allready ran signalAlert
# 0 - All good
# anything else - Had Error, no notification has happened yet

if [ "$rc" -eq "20" ];
then
  echo "Rebooting..."
  /sbin/reboot
  exit 0
elif [ "$rc" -eq "10" ];
then
  error_happened
elif [ "$rc" -ne "0" ];
then
  echo "do_task returned $rc"
  signalAlert "do_task error"
  error_happened
fi

echo "Powering off..."
/sbin/poweroff
