#!/usr/bin/python -u

import sys
import json
import urllib2
import tempfile
import os

from platopxe.libplatopxe import PlatoPXE, PlatoPxeNoJobException
from pylib.harddrive import Harddrive
from pylib.afudos import Afudos
from pylib.aten import Aten
from pylib.mpt3sas import Mpt3SAS
from pylib.mpt2sas import Mpt2SAS
from pylib.megaraid import MegaRAID

#config = { group: { 'firmware': { model: { version: filename } }, 'target': { model: version } }

chunk_size = 4096

DEVICE_GROUP_LIST = ( Afudos, Aten, Mpt2SAS, Mpt3SAS, MegaRAID, Harddrive ) # check order: Motherboard, IPMI, HBA, RAID, Harddrives

platopxe = PlatoPXE( host=os.environ.get( 'plato_host', 'plato' ), proxy=os.environ.get( 'plato_proxy', None ) )

resource_location = sys.argv[1]
try:
  proxy = sys.argv[2] # only for getting files, talking to plato http proxy is handled externally
except KeyError:
  proxy = None

print 'Using "%s" for resource sources' % resource_location

if proxy:
  print 'Using Proxy "%s" for getting resources' % proxy
  opener = urllib2.build_opener( urllib2.ProxyHandler( { 'http': proxy, 'https': proxy } ) )
else:
  opener = urllib2.build_opener( urllib2.ProxyHandler( {} ) )

filename_cache = {}

try:
  config = json.loads( open( '/config.json', 'r' ).read() )[ 'firmware' ]
except:
  print 'Error loading /config.json'
  sys.exit( 1 )

if config == '':
  print 'No Firmware to update, continueing...'
  sys.exit( 0 )

try:
  try:
    count = int( platopxe.readEnv( 'firmware-update_boot_count' ) )
  except ( TypeError, ValueError ):
    count = 0

  print 'Boot Count: %s' % count

  if count > 5:
    print 'Rebooted more than 5 times, something is wrong.'
    sys.exit( 1 )

  platopxe.writeEnv( 'firmware-update_boot_count', count + 1 )
except PlatoPxeNoJobException:
  print 'WARNING: No job to store boot count... We may reboot forever without knowing.'

dirty = False

platopxe.postMessage( 'Checking for Updates....' )
print 'Checking to see if things need to be updates....'
for device_group in DEVICE_GROUP_LIST:
  handler = device_group()
  group = handler.__class__.__name__.lower()
  print 'Checking "%s"...' % group
  try:
    firmware_group = config[ group ][ 'firmware' ]
  except KeyError:
    continue

  print 'Getting Targets for "%s"...' % group
  target_list = handler.getTargets()

  if target_list is None:
    print 'Error getting Target list'
    sys.exit( 1 )

  for ( target, model, version ) in target_list:
    print 'Checking for update for model "%s" version "%s"...' % ( model, version )
    try:
      filename = firmware_group[ model ][ version ]
    except KeyError:
      continue

    if filename not in filename_cache:
      url = '%s/%s' % ( resource_location, filename )
      try:
        resp = opener.open( url )
      except urllib2.HTTPError as e:
        print 'error retreiving "%s", e %s:' % ( url, e )
        sys.exit( 1 )

      ( fd, local_filename ) = tempfile.mkstemp()
      buff = resp.read( chunk_size )
      while buff:
        os.write( fd, buff )
        buff = resp.read( chunk_size )

      resp.close()
      os.close( fd )
      print 'Downloaded "%s" to "%s"' % ( filename, local_filename )
      filename_cache[ filename ] = local_filename

    platopxe.postMessage( 'Updating model "%s" version "%s" with "%s"' % ( model, version, filename ) )
    print 'Updating model "%s" version "%s" with "%s"' % ( model, version, filename )
    if not handler.updateTarget( target, filename_cache[ filename ] ):
      print 'Firmware update Failed'
      sys.exit( 1 )

    dirty = True

  if dirty: # don't want to try to update harddrive firmware if the HBA/RAID card's firmware hasn't been rebooted
    break

if dirty:
  platopxe.postMessage( 'Firmware Changed, rebooting.' )
  sys.exit( 20 )

platopxe.postMessage( 'Checking Versions...' )
print 'Checking Curent Versions...'

for device_group in DEVICE_GROUP_LIST:
  handler = device_group()
  group = handler.__class__.__name__.lower()
  print 'Checking "%s"...' % group
  try:
    target_group = config[ group ][ 'target' ]
  except KeyError:
    continue

  print 'Getting Targets for "%s"...' % group
  target_list = handler.getTargets()

  if target_list is None:
    print 'Error getting Target list'
    sys.exit( 1 )

  for ( target, model, version ) in target_list:
    try:
      target_version = target_group[ model ]
    except KeyError:
      continue

    if target_version != version:
      print 'target "%s" is not at required version "%s" found "%s"' % ( target, target_version, version )
      sys.exit( 1 )


print 'Done!'
sys.exit( 0 )
