#!/bin/sh
#SOURCE: http://security.ubuntu.com/ubuntu/pool/main/b/bcache-tools/bcache-tools_1.0.8.orig.tar.gz
#FILE: bcache-tools_1.0.8.orig.tar.gz
#HASH: e848aa9ab376d93588de3fe3dd5ed33bacaae53c

# I could not find an .tar.gz on the project website, so we are going to use ubuntu, thanks!
# the patch is to fix a problem with our version of gcc, and also to remove a safety cehck, b/c I don't want to pull in wipefs just for this
set -e
#set -x

build()
{
  tar --strip-components=1 -xzf $1
  patch -p1 --ignore-whitespace << 'PATCH_END'
--- ./bcache.c.save	2020-06-12 21:13:21.827778191 -0600
+++ ./bcache.c	2020-06-12 21:13:49.470980666 -0600
@@ -115,7 +115,7 @@
	 0x9AFCE626CE85B507ULL
 };

-inline uint64_t crc64(const void *_data, size_t len)
+uint64_t crc64(const void *_data, size_t len)
 {
 	uint64_t crc = 0xFFFFFFFFFFFFFFFFULL;
 	const unsigned char *data = _data;

--- ./make-bcache.c.orig	2020-06-13 07:37:13.005990880 -0600
+++ ./make-bcache.c	2020-06-13 07:37:24.320078624 -0600
@@ -203,7 +203,7 @@
 		/* XXX wipefs doesn't know how to remove partition tables */
 		fprintf(stderr, "Device %s already has a non-bcache superblock, "
 				"remove it using wipefs and wipefs -a\n", dev);
-		exit(EXIT_FAILURE);
+		//exit(EXIT_FAILURE);
 	}

 	memset(&sb, 0, sizeof(struct cache_sb));
PATCH_END
  if [ "x$2" = "xx86_64" ]
  then
    make
  elif [ "x$2" = "xarm" ]
  then
    export CC=arm-linux-gnueabihf-gcc


    make
  elif [ "x$2" = "xarm64" ]
  then
    make CROSS_COMPILE=aarch64-linux-gnu-
  fi
}

install()
{
  cp -f $3/make-bcache $1/sbin
  cp -f $3/bcache-super-show $1/sbin
  cp -f $3/probe-bcache $1/lib/udev
  cp -f $3/69-bcache.rules $1/lib/udev/rules.d/

  cat << 'UDEV_END' > $1/lib/udev/rules.d/69-bcache.rules
SUBSYSTEM!="block", GOTO="bcache_end"
ACTION=="remove", GOTO="bcache_end"
ENV{DM_UDEV_DISABLE_OTHER_RULES_FLAG}=="1", GOTO="bcache_end"
KERNEL=="fd*|sr*", GOTO="bcache_end"

# blkid was run by the standard udev rules
# It recognised bcache (util-linux 2.24+)
ENV{ID_FS_TYPE}=="bcache", GOTO="bcache_backing_found"
# It recognised something else; bail
ENV{ID_FS_TYPE}=="?*", GOTO="bcache_backing_end"

# Backing devices: scan, symlink, register
IMPORT{program}="probe-bcache -o udev $tempnode"
ENV{ID_FS_TYPE}!="bcache", GOTO="bcache_backing_end"
ENV{ID_FS_UUID_ENC}=="?*", SYMLINK+="disk/by-uuid/$env{ID_FS_UUID_ENC}"

LABEL="bcache_backing_found"
RUN{builtin}+="kmod load bcache"
RUN+="bcache-register $tempnode"
LABEL="bcache_backing_end"

# Cached devices: symlink
DRIVER=="bcache", ENV{CACHED_UUID}=="?*", SYMLINK+="bcache/by-uuid/$env{CACHED_UUID}"
DRIVER=="bcache", ENV{CACHED_LABEL}=="?*", SYMLINK+="bcache/by-label/$env{CACHED_LABEL}"

LABEL="bcache_end"
UDEV_END
}

binaries()
{
  ls $1/sbin/make-bcache
  ls $1/sbin/bcache-super-show
  ls $1/lib/udev/probe-bcache
}
