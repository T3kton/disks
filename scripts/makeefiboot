#!/bin/bash
set -e
set -x

# $1 - output filename
# $2 - path to kernel
# $3 - path to initrd
# $4 - path to cmdline
# $5 - os release file

# size in 1k blocks, default is 60k ie 60meg disk
DISK_SIZE="70k"

MOUNT_POINT="build.images/mnt"

if ! which sfdisk parted > /dev/null
then
  print "sfdisk and/or parted is missing, please install"
  exit 1
fi

if [ ! -d $MOUNT_POINT ]
then
  mkdir -p $MOUNT_POINT
fi

if mountpoint -q $MOUNT_POINT
then
  echo "$MOUNT_POINT allready mounted, possibly a failed build needs to be cleaned up?"
  exit 1
fi

EFI_BIN64="/usr/lib/systemd/boot/efi/systemd-bootx64.efi"
EFI_STUB64="/usr/lib/systemd/boot/efi/linuxx64.efi.stub"

if [ ! -f "$EFI_BIN64" ] || [ ! -f "$EFI_STUB64" ];
then
  echo "systemd-bootx64.efi not found install systemd"
  exit 1
fi

if [ $( id -u ) != 0 ]
then
  echo "Must be root"
  exit 1
fi

rm -f $1

echo "Creating image..."
dd if=/dev/zero of=$1 bs=1k count=$DISK_SIZE
DRIVE_LOOP=$(losetup -f --show $1)
echo "Using loop device '$DRIVE_LOOP' for image..."

echo "Formatting partition..."
mkfs.fat -F 32 $DRIVE_LOOP

echo "Mounting partition..."
mount -n $DRIVE_LOOP $MOUNT_POINT

echo "Copying files..."
mkdir -p $MOUNT_POINT/efi/boot/
mkdir -p $MOUNT_POINT/loader/
mkdir -p $MOUNT_POINT/efi/Linux/

cp $EFI_BIN64 $MOUNT_POINT/efi/boot/bootx64.efi

echo "timeout 2
auto-entries 0
auto-firmware 0
" > $MOUNT_POINT/loader/loader.conf

#    --add-section .splash="/usr/share/systemd/bootctl/splash-arch.bmp" --change-section-vma .splash=0x40000 \
objcopy \
    --add-section .osrel="$5" --change-section-vma .osrel=0x20000 \
    --add-section .cmdline="$4" --change-section-vma .cmdline=0x30000 \
    --add-section .linux="$2" --change-section-vma .linux=0x2000000 \
    --add-section .initrd="$3" --change-section-vma .initrd=0x3000000 \
    $EFI_STUB64 $MOUNT_POINT/efi/Linux/linux.efi

# and then sign linux.efi

sleep 1
sync

echo "Unmounting..."
umount $MOUNT_POINT
losetup -d $DRIVE_LOOP
